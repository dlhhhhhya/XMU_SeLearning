1
00:00:01,200 --> 00:00:03,733
好下面我们介绍最后一种

2
00:00:04,300 --> 00:00:06,400
非常重要的数据结构

3
00:00:06,400 --> 00:00:08,400
排序列表SOLT link list

4
00:00:12,333 --> 00:00:14,466
那么与排序列表相关的

5
00:00:14,966 --> 00:00:17,666
代码文件呢保存在如下这两个

6
00:00:18,300 --> 00:00:19,100
文件中

7
00:00:21,200 --> 00:00:24,733
那么与salt link list排序列表非常

8
00:00:25,000 --> 00:00:25,700
重要的

9
00:00:25,700 --> 00:00:28,066
非常相关的两个基本数据结构是

10
00:00:28,066 --> 00:00:30,533
salt link list和salt link attribute

11
00:00:30,966 --> 00:00:33,399
那么这个salt link啊trivial保存的是一些

12
00:00:33,566 --> 00:00:35,733
啊控制信息啊控制信息

13
00:00:35,866 --> 00:00:38,166
那么最主要的就是这个salt link指针

14
00:00:38,166 --> 00:00:39,366
这个salt link指针呢

15
00:00:39,366 --> 00:00:41,966
指向的就是一个啊排序列表

16
00:00:42,100 --> 00:00:42,866
一个排序列表

17
00:00:42,866 --> 00:00:43,999
排序列表最长

18
00:00:44,000 --> 00:00:46,266
最经常用到的场景就是计时器

19
00:00:46,733 --> 00:00:50,466
计时器那么salt link所指向的这个

20
00:00:50,733 --> 00:00:52,099
所指向的这个双向链表

21
00:00:52,100 --> 00:00:53,700
主要就是这样的一个结构体

22
00:00:53,700 --> 00:00:55,166
salt link list结构体

23
00:00:55,300 --> 00:00:57,600
那么在这里头salt link list NODE呢

24
00:00:57,600 --> 00:00:58,700
是一个指针

25
00:00:58,900 --> 00:00:59,733
那么RO number

26
00:00:59,733 --> 00:01:01,866
就是这个计时器的到期时间

27
00:01:02,200 --> 00:01:03,366
但是这个RO number呢

28
00:01:03,366 --> 00:01:04,666
有一个比较有意思的特点

29
00:01:04,666 --> 00:01:07,166
我们通过这个图来介绍一下啊RO number

30
00:01:07,566 --> 00:01:08,366
那么

31
00:01:09,100 --> 00:01:10,300
RO number呢

32
00:01:10,300 --> 00:01:12,200
比如说我们现在有三个计时器

33
00:01:12,200 --> 00:01:14,700
0号计时器1号计时器和2号计时器

34
00:01:14,933 --> 00:01:16,333
那么这三个计时器呢

35
00:01:16,333 --> 00:01:17,466
通过这个

36
00:01:17,600 --> 00:01:19,733
双向循环列表的指针连接在一起

37
00:01:19,933 --> 00:01:21,466
那么这个三个指

38
00:01:21,466 --> 00:01:25,099
三个节点的这个RO number分别是50和2

39
00:01:25,366 --> 00:01:26,533
那么表示什么意思呢

40
00:01:26,533 --> 00:01:29,533
表示第一个计时器它的过期时间是5

41
00:01:29,733 --> 00:01:32,533
而第二个过计时器它的过时

42
00:01:32,533 --> 00:01:34,333
过期时间并不是10而是多少呢

43
00:01:34,333 --> 00:01:36,799
而是5+10 那么第三个

44
00:01:36,933 --> 00:01:38,966
计时器的过期时间也不是2

45
00:01:39,000 --> 00:01:41,733
是5+10+2 所以第一个计

46
00:01:41,733 --> 00:01:43,166
时器的定时时间是5

47
00:01:43,166 --> 00:01:44,466
第二个计时器的定

48
00:01:45,200 --> 00:01:46,400
到期时间是15

49
00:01:46,400 --> 00:01:49,166
第三个计时器到期时间是17 啊

50
00:01:49,166 --> 00:01:50,933
大家要注意是roll number

51
00:01:50,966 --> 00:01:52,733
要要要roll number这个

52
00:01:52,733 --> 00:01:54,899
这个节roll number的计时器的值

53
00:01:54,900 --> 00:01:56,266
并不是这个

54
00:01:56,733 --> 00:01:58,733
并不是它这个里头计数的这个number

55
00:01:58,733 --> 00:02:00,366
而是要把它前面的节点

56
00:02:00,600 --> 00:02:01,733
的roll number相加

57
00:02:01,766 --> 00:02:02,599
和它相加

58
00:02:02,666 --> 00:02:04,733
才得到的是真正的它的过期时间

59
00:02:06,133 --> 00:02:08,566
那么从啊逻辑上来讲啊

60
00:02:08,566 --> 00:02:10,166
逻辑上来讲那它的这个

61
00:02:10,533 --> 00:02:11,933
它的这个形状就是这样的

62
00:02:11,933 --> 00:02:14,566
那这是里面存储着一些啊

63
00:02:14,666 --> 00:02:15,799
存储着一些什么呢

64
00:02:15,800 --> 00:02:17,900
就是排序列表的一些统计信息啊

65
00:02:17,900 --> 00:02:19,866
统控制信息或者统计信息

66
00:02:20,166 --> 00:02:21,766
那么真正的排序链表

67
00:02:21,800 --> 00:02:23,500
保存在这个指针所指向的

68
00:02:23,500 --> 00:02:25,300
大家看是一个双向循环链表

69
00:02:25,866 --> 00:02:26,699
双向循环链表

70
00:02:28,600 --> 00:02:31,933
那么这个呢是关于排序列表的一些红

71
00:02:32,100 --> 00:02:32,933
那么在这里呢

72
00:02:32,933 --> 00:02:36,166
最主要的红主要有RO number的减法啊

73
00:02:36,166 --> 00:02:37,866
把number一和number 2相减

74
00:02:38,100 --> 00:02:39,166
还有RO number的加法

75
00:02:39,166 --> 00:02:40,899
把number一和number 2相加

76
00:02:41,266 --> 00:02:42,999
那么这个呢是把roll number减一

77
00:02:43,000 --> 00:02:45,466
那这个呢是返回roll number啊

78
00:02:45,566 --> 00:02:46,266
那么这个呢

79
00:02:46,266 --> 00:02:49,899
是设置一个排序列表中节点的roll number

80
00:02:49,900 --> 00:02:50,966
用这个value你看

81
00:02:50,966 --> 00:02:53,466
用这个vallue设置排序列表中的

82
00:02:53,466 --> 00:02:54,799
一个节点的roll number

83
00:02:58,366 --> 00:03:00,066
好我们仍然是介绍

84
00:03:00,300 --> 00:03:00,900
关于

85
00:03:00,900 --> 00:03:02,800
介绍完了这些基本数据结构之后呢

86
00:03:02,800 --> 00:03:04,533
我们就要介绍关于

87
00:03:04,866 --> 00:03:06,799
排序列表的一些操作

88
00:03:06,800 --> 00:03:08,733
那么第一个操作就是触手化操作

89
00:03:08,866 --> 00:03:10,766
就是OS SOLT link init

90
00:03:10,933 --> 00:03:13,066
那么在这里头呢我们看一下啊

91
00:03:13,733 --> 00:03:16,199
首先仍然是从这个缓冲区

92
00:03:16,600 --> 00:03:18,066
通过memory ilock

93
00:03:18,166 --> 00:03:20,966
从缓冲池中啊从内存缓冲池中

94
00:03:21,166 --> 00:03:23,266
申请一个头接点啊

95
00:03:23,300 --> 00:03:26,266
申请一个双向链表的头接点啊头接点

96
00:03:26,700 --> 00:03:29,266
然后呢如果申请不成功呢就返回错误

97
00:03:29,400 --> 00:03:32,333
否则的话清空所申请的头节点

98
00:03:32,366 --> 00:03:33,566
然后把这个头节点呢

99
00:03:33,566 --> 00:03:36,966
付给这个控制信息的soltlink指针啊

100
00:03:36,966 --> 00:03:38,766
然后对这个头节点进行初始化

101
00:03:38,766 --> 00:03:39,566
返回成功

102
00:03:42,100 --> 00:03:43,166
那么第二个

103
00:03:43,366 --> 00:03:45,999
也是关于排序列表最重要的一个操作

104
00:03:46,000 --> 00:03:47,400
就是把一个新的

105
00:03:47,533 --> 00:03:49,566
节点插入到这个排序列表中啊

106
00:03:49,566 --> 00:03:51,199
比如说我们把一个计时器

107
00:03:51,366 --> 00:03:53,466
插入到这个排序列表中啊

108
00:03:53,500 --> 00:03:54,000
那好

109
00:03:54,000 --> 00:03:55,933
那么我们看一下这个操作是什么样的

110
00:03:55,933 --> 00:03:57,766
啊比如说我们现在呢

111
00:03:58,533 --> 00:04:00,899
想插入一个节点啊插入一个节点

112
00:04:00,900 --> 00:04:02,333
现在呢我们举个例子啊

113
00:04:02,333 --> 00:04:03,466
我们在这举个例子

114
00:04:06,966 --> 00:04:07,999
啊我们在这举个例子

115
00:04:08,000 --> 00:04:09,933
比如说我们还拿刚才那个例子

116
00:04:09,966 --> 00:04:11,766
我们在这个刚才那个例子中呢

117
00:04:11,766 --> 00:04:14,333
我们第一个节点的超时值是5

118
00:04:14,900 --> 00:04:17,166
第二个节点的超时值是10

119
00:04:18,866 --> 00:04:21,466
第三个节点的超市值是多少呢是2

120
00:04:23,166 --> 00:04:23,966
是2

121
00:04:25,666 --> 00:04:28,133
那好我现在想插入一个新节点啊

122
00:04:28,133 --> 00:04:29,866
这是这个SOLT link list

123
00:04:30,266 --> 00:04:31,866
双向链表啊双向链表

124
00:04:31,966 --> 00:04:33,866
为了简单起见我就画一个指针啊

125
00:04:33,866 --> 00:04:35,399
我就画我就画一个指针

126
00:04:35,733 --> 00:04:37,466
那比如说我现在呢

127
00:04:37,600 --> 00:04:38,900
想要插入一个新的节点

128
00:04:38,900 --> 00:04:41,666
那这个新的节点的超市值是多少呢 16

129
00:04:43,066 --> 00:04:45,266
比如说我现在想插入一个新的超时啊

130
00:04:45,266 --> 00:04:46,399
指针时钟节点

131
00:04:46,400 --> 00:04:48,600
这个时钟节点的超时值是6

132
00:04:48,733 --> 00:04:49,266
那好

133
00:04:49,266 --> 00:04:51,999
那现在呢我们看一下他该怎么操作

134
00:04:52,566 --> 00:04:53,499
看该怎么操作

135
00:04:54,866 --> 00:04:56,166
首先呢我们判断一下

136
00:04:56,166 --> 00:04:58,533
这个新插入的节点的这个超时值

137
00:04:58,566 --> 00:05:00,666
是不是大于系统允许的最大时

138
00:05:00,666 --> 00:05:01,466
因为我们知道

139
00:05:01,600 --> 00:05:03,600
系统时钟总总是有个最大值的

140
00:05:03,700 --> 00:05:05,500
那如果大于最大的系统时钟

141
00:05:05,500 --> 00:05:06,666
我们用这个最大时钟

142
00:05:06,666 --> 00:05:08,533
给它进行一个限制啊

143
00:05:08,533 --> 00:05:10,266
你看这是set嘛

144
00:05:10,266 --> 00:05:11,766
set嘛就是我把这个

145
00:05:12,133 --> 00:05:14,499
这个插入的节点的这个时钟限制为

146
00:05:14,500 --> 00:05:15,700
最大值啊

147
00:05:15,700 --> 00:05:17,000
不能超过超过这个数

148
00:05:17,300 --> 00:05:19,700
好如果不是的话那我们怎么办呢

149
00:05:19,700 --> 00:05:22,733
我们是通过这个控制结构取得SOLT link

150
00:05:22,900 --> 00:05:24,166
排序链本的头指针

151
00:05:24,466 --> 00:05:25,599
啊这是取的头指针

152
00:05:25,733 --> 00:05:28,099
头指针那好我们判断这个头指针

153
00:05:28,133 --> 00:05:29,866
这个排序列表是不是空的

154
00:05:29,933 --> 00:05:31,366
如果排序列表是空的话的

155
00:05:31,366 --> 00:05:33,799
那我就直接把这个新的节点

156
00:05:34,066 --> 00:05:36,266
插入到这个排序列表中就可以了

157
00:05:37,000 --> 00:05:38,366
那么否则的话呢

158
00:05:38,666 --> 00:05:39,466
否则的话呢

159
00:05:39,466 --> 00:05:40,299
我们要干嘛呢

160
00:05:40,300 --> 00:05:42,366
我们就啊获得什么呢

161
00:05:42,366 --> 00:05:44,499
这个排序列表的第一个节点

162
00:05:44,500 --> 00:05:45,866
这个通过lost鹌鹑好

163
00:05:45,866 --> 00:05:46,099
比如说

164
00:05:46,100 --> 00:05:48,066
我们现在就获得了这个第一个节点

165
00:05:48,500 --> 00:05:50,500
看DL list entry

166
00:05:50,500 --> 00:05:51,500
实际上是获得

167
00:05:51,500 --> 00:05:53,466
排序列表的第一个节点啊

168
00:05:53,466 --> 00:05:55,299
获得第一个节点啊

169
00:05:55,300 --> 00:05:57,900
把这个节点放在这个list的salted里

170
00:05:57,900 --> 00:05:59,566
然后经过一个door循环

171
00:06:00,000 --> 00:06:02,300
那么这个多样循环就开始便利啥呀

172
00:06:02,300 --> 00:06:03,533
就开始便利这个链表

173
00:06:03,533 --> 00:06:04,933
开始便利这个链表

174
00:06:05,166 --> 00:06:08,466
他拿着这个新结点的柔number和

175
00:06:09,066 --> 00:06:10,666
啊当前节点的便利

176
00:06:10,666 --> 00:06:12,899
便利的当前这个节点roll number去比较

177
00:06:12,900 --> 00:06:15,900
比如说你看我这个6和这个5比较

178
00:06:15,900 --> 00:06:16,933
6比5大是不是

179
00:06:16,933 --> 00:06:19,099
所以6应该在5的后面对不对

180
00:06:19,133 --> 00:06:21,699
那如果6-5的后的话那能保持6吗

181
00:06:21,700 --> 00:06:23,366
不能保持6我必须保持几

182
00:06:23,533 --> 00:06:25,066
因为这个5已经有了跑出去了

183
00:06:25,066 --> 00:06:25,866
所以我要用什么

184
00:06:25,866 --> 00:06:26,999
6减1对不对

185
00:06:27,500 --> 00:06:30,733
6-1= 6-5啊6-5=

186
00:06:31,500 --> 00:06:34,600
16-5=1 所以怎么样这个地方就变成一了

187
00:06:34,600 --> 00:06:36,133
看到了吧一好

188
00:06:36,133 --> 00:06:37,099
那变成一之后呢

189
00:06:37,100 --> 00:06:38,733
我们再拿这个一和10去比较

190
00:06:38,733 --> 00:06:40,099
我们发现怎么样

191
00:06:40,166 --> 00:06:43,299
1:10要 1比10要小对吧

192
00:06:43,300 --> 00:06:45,133
1:10要小所以怎么办呢

193
00:06:45,133 --> 00:06:45,799
我们知道

194
00:06:45,800 --> 00:06:48,000
那这时候我们就要把这个柔呢

195
00:06:48,000 --> 00:06:49,266
我要把这个新的节点

196
00:06:49,266 --> 00:06:51,699
插到5和10之间的这个位置啊

197
00:06:51,700 --> 00:06:53,366
你看我要把这个一

198
00:06:53,366 --> 00:06:55,533
这个节点插到5和10之间的这个位置

199
00:06:57,266 --> 00:06:58,066
那么

200
00:06:58,733 --> 00:06:59,566
这样就结束了吗

201
00:06:59,566 --> 00:07:00,766
不行因为什么呢

202
00:07:00,766 --> 00:07:03,099
因为你看这个一要插插到这的话

203
00:07:03,100 --> 00:07:05,100
那这个地方这个10还能是10吗

204
00:07:05,100 --> 00:07:05,900
不能是10了

205
00:07:05,900 --> 00:07:07,733
那他应该变成几呢

206
00:07:07,766 --> 00:07:09,566
应该是10减去一

207
00:07:10,066 --> 00:07:11,766
等于 9

208
00:07:12,166 --> 00:07:13,733
所以这个地方应该改成9

209
00:07:14,933 --> 00:07:16,299
所以应该用这个类似number

210
00:07:16,300 --> 00:07:18,166
减去这个新插入键的那种number

211
00:07:18,166 --> 00:07:19,399
的值好

212
00:07:19,400 --> 00:07:21,133
那么这个节点需要变吗

213
00:07:22,066 --> 00:07:23,399
这个节点是不需要变的

214
00:07:23,400 --> 00:07:24,900
因为啊因为这个

215
00:07:24,966 --> 00:07:26,799
这个节点的前一个节点变了之后

216
00:07:26,800 --> 00:07:28,266
后面节点都不需要变了

217
00:07:28,333 --> 00:07:29,399
所以大家看啊

218
00:07:29,500 --> 00:07:30,400
在这个地方

219
00:07:30,566 --> 00:07:31,599
这个地方就是什么

220
00:07:31,600 --> 00:07:34,166
当这个当前节点的肉number

221
00:07:34,166 --> 00:07:36,299
小于新插入节点的肉number的时候

222
00:07:36,300 --> 00:07:38,000
我就要进行减操作

223
00:07:38,400 --> 00:07:39,066
用什么呢

224
00:07:39,066 --> 00:07:42,799
用就就是说完成这个什么6-5=1的操作

225
00:07:42,900 --> 00:07:43,733
就是用什么呢

226
00:07:43,733 --> 00:07:45,866
新插入节点那种number减去

227
00:07:46,133 --> 00:07:47,566
啊当前节点的肉number

228
00:07:48,566 --> 00:07:50,666
啊那么反之else

229
00:07:50,700 --> 00:07:53,166
如果这个节点后面这个节点呢

230
00:07:53,166 --> 00:07:55,133
它的这个roll number要大于

231
00:07:55,166 --> 00:07:56,466
啊新插入节单roll number

232
00:07:56,466 --> 00:07:57,099
那我就要什么呢

233
00:07:57,100 --> 00:07:58,900
我要用这个大于的节点的roll number

234
00:07:58,900 --> 00:08:00,766
减去这个新插入节单roll number

235
00:08:00,766 --> 00:08:02,699
也就是这个10-1=9 那

236
00:08:02,700 --> 00:08:04,166
么最后呢啊

237
00:08:04,900 --> 00:08:05,700
完成这些

238
00:08:05,800 --> 00:08:06,933
找到这个位置之后

239
00:08:06,933 --> 00:08:08,099
完成这些操作之后呢

240
00:08:08,100 --> 00:08:09,100
我就可以怎么样

241
00:08:09,266 --> 00:08:13,266
通过这个啊插入操作啊SOLT list insert

242
00:08:13,266 --> 00:08:14,933
那充通过这个插入操作呢

243
00:08:14,933 --> 00:08:16,999
我就把这个细节插入到这个

244
00:08:17,066 --> 00:08:17,999
排序列表中

245
00:08:18,000 --> 00:08:19,666
从而完成啊

246
00:08:20,200 --> 00:08:21,733
向排序列表中

247
00:08:21,866 --> 00:08:23,599
插入新节点的这么一个功能

248
00:08:26,333 --> 00:08:29,333
那么这个函数OS check saltlink

249
00:08:29,333 --> 00:08:31,166
那这个函数它的主要功能是什么呢

250
00:08:31,166 --> 00:08:33,166
就是检查什么呢

251
00:08:33,400 --> 00:08:35,300
检查某一个节点啊

252
00:08:35,300 --> 00:08:36,266
检查某一个节点

253
00:08:36,266 --> 00:08:38,199
是不是出现在saltlink里

254
00:08:38,333 --> 00:08:39,466
这个排序列表里

255
00:08:39,466 --> 00:08:42,366
那这个实验的这个实践的很简单啊

256
00:08:42,366 --> 00:08:43,399
实践的很简单

257
00:08:43,566 --> 00:08:44,366
大家看

258
00:08:45,066 --> 00:08:47,966
首先我取得这个排序列表的头啊

259
00:08:47,966 --> 00:08:49,533
第一个节点啊

260
00:08:49,533 --> 00:08:52,533
我首先呢取得了这个排序列表的

261
00:08:53,666 --> 00:08:56,699
啊排序列表的一个啊最后一个节点啊

262
00:08:56,700 --> 00:08:59,200
因为previous嘛是最后一个尾节点对吧

263
00:08:59,200 --> 00:09:01,466
尾节点因为是双向循环嘛

264
00:09:01,600 --> 00:09:02,966
然后呢开始

265
00:09:04,100 --> 00:09:04,800
循环啊

266
00:09:04,800 --> 00:09:07,133
循环访问每一个节点啊每一个节点

267
00:09:07,166 --> 00:09:10,299
那如果我找到了这个节点啊我就返回

268
00:09:10,366 --> 00:09:12,933
否则的话我就往前走一个节点啊

269
00:09:12,933 --> 00:09:14,333
我就往前走一个节点

270
00:09:14,500 --> 00:09:16,500
它采用的是一种回溯的方式啊

271
00:09:16,733 --> 00:09:17,699
回溯的方式

272
00:09:23,066 --> 00:09:25,733
好那么下一个操作呢是

273
00:09:26,100 --> 00:09:28,866
OS DELETE solt link那是从什么呢

274
00:09:28,866 --> 00:09:30,066
就是从这个

275
00:09:30,100 --> 00:09:33,066
排序列表中删除一个特定的节点啊

276
00:09:33,066 --> 00:09:34,466
删除一个特定的节点

277
00:09:34,933 --> 00:09:36,699
那么其中呢

278
00:09:36,700 --> 00:09:39,866
salt link Heather呢是排序列表的表头

279
00:09:40,066 --> 00:09:42,133
salt list呢是要删除的节点

280
00:09:42,200 --> 00:09:44,866
那么首先啊我们要获取

281
00:09:45,166 --> 00:09:46,766
排序列表表头的

282
00:09:47,866 --> 00:09:49,299
排序列表头节点

283
00:09:49,533 --> 00:09:51,699
那么然后呢在这个位置啊

284
00:09:51,700 --> 00:09:53,300
通过调这个函数检查

285
00:09:53,600 --> 00:09:55,666
要删除节点是否在排序列

286
00:09:55,666 --> 00:09:58,599
表里啊那么接着呢我们

287
00:09:59,166 --> 00:10:02,699
判断是否只有一个节点啊

288
00:10:02,700 --> 00:10:03,766
是否只有一个节点

289
00:10:03,766 --> 00:10:06,066
也就是说这个节点这个

290
00:10:06,966 --> 00:10:08,533
那么我们首先要判断呢

291
00:10:08,533 --> 00:10:10,199
这个是否只有一个节点

292
00:10:10,200 --> 00:10:11,533
如果是的话呢

293
00:10:11,933 --> 00:10:13,866
则直接执行什么

294
00:10:13,866 --> 00:10:16,866
直接执行删除操作直接执行删除操作

295
00:10:17,800 --> 00:10:18,866
那么因为只有一个节点了

296
00:10:18,866 --> 00:10:20,999
所以我们就直接直直接删除操作

297
00:10:21,000 --> 00:10:22,800
如果要是这个条件成立的话

298
00:10:22,800 --> 00:10:25,066
也就是说当前这个排序节点啊

299
00:10:25,166 --> 00:10:27,566
当前这个排序列表中不只有一个节点

300
00:10:27,566 --> 00:10:28,566
那我们怎么办呢

301
00:10:28,566 --> 00:10:29,899
我们就要什么呢

302
00:10:29,900 --> 00:10:30,700
我们就要

303
00:10:30,700 --> 00:10:31,500
那大家想一想

304
00:10:31,500 --> 00:10:33,133
就像我刚才说的当我插入

305
00:10:33,200 --> 00:10:34,666
当我把一个新节点插入

306
00:10:35,100 --> 00:10:37,000
插入到这个排序列表的时候

307
00:10:37,066 --> 00:10:38,199
那么我需要怎么样

308
00:10:38,200 --> 00:10:39,866
我需要修改这个排序列表

309
00:10:39,866 --> 00:10:41,199
这个插入节点之前

310
00:10:42,066 --> 00:10:43,766
和之后的那些节点那种number

311
00:10:43,766 --> 00:10:44,466
那同样道理

312
00:10:44,466 --> 00:10:45,566
当我把一个

313
00:10:45,800 --> 00:10:47,700
节点从排序列表中删除的时候

314
00:10:47,700 --> 00:10:48,300
我要怎么样

315
00:10:48,300 --> 00:10:49,366
我是不是要修改

316
00:10:49,700 --> 00:10:51,266
这个节点之后的

317
00:10:51,333 --> 00:10:53,166
啊这个节点之后的所有

318
00:10:53,333 --> 00:10:54,299
所有节点

319
00:10:54,400 --> 00:10:56,700
所有排序列表的节点那个柔number

320
00:10:56,700 --> 00:10:57,466
所以你看

321
00:10:57,466 --> 00:11:00,066
在这啊在这你看我我就获得什么呢

322
00:11:00,066 --> 00:11:00,966
我获得这个

323
00:11:00,966 --> 00:11:02,999
我删除那个节点之后的那个节点

324
00:11:03,400 --> 00:11:04,700
然后呢对之后的节点

325
00:11:04,700 --> 00:11:07,066
都都要增加这个删除节的那种number

326
00:11:07,166 --> 00:11:09,533
那这样的话呢我才能够把它啊

327
00:11:09,533 --> 00:11:11,066
然后最后我增加完了之后

328
00:11:11,066 --> 00:11:12,299
我才能删除这个

329
00:11:12,400 --> 00:11:13,133
这个节点

330
00:11:13,133 --> 00:11:15,466
所以这个地方需要判断啊删除

331
00:11:15,600 --> 00:11:18,300
我删除的那个节点是不是只有一

332
00:11:18,333 --> 00:11:19,499
删除的那个排序队列

333
00:11:19,500 --> 00:11:20,566
是不是只有一个节点

334
00:11:23,700 --> 00:11:24,900
好那么

335
00:11:24,966 --> 00:11:26,166
下一个操作是叫做

336
00:11:26,166 --> 00:11:28,766
OS salt link get next expare time

337
00:11:28,866 --> 00:11:29,199
那从

338
00:11:29,200 --> 00:11:30,666
名字上你就可以知道这是什么意思

339
00:11:30,666 --> 00:11:31,733
就是获取什么

340
00:11:31,733 --> 00:11:34,566
排序列表中下一个过期的时间

341
00:11:34,566 --> 00:11:35,766
下一个过期时间

342
00:11:35,966 --> 00:11:37,199
那这个也很好理解

343
00:11:37,266 --> 00:11:39,766
首先是我获得排序列表的头指针

344
00:11:39,933 --> 00:11:42,699
然后呢判断这个列表是不是为空啊

345
00:11:42,700 --> 00:11:44,466
如果为空我们就我们就什么也不做

346
00:11:44,466 --> 00:11:45,999
是不是什么也不做啊

347
00:11:46,000 --> 00:11:47,000
就是说这是一个

348
00:11:47,000 --> 00:11:49,166
因为expare time在初始化的时候说

349
00:11:49,400 --> 00:11:50,600
初始化一个无效值

350
00:11:50,600 --> 00:11:51,933
所以这时候就是无效值

351
00:11:52,066 --> 00:11:53,799
如果这个排序列表不为空的话

352
00:11:53,800 --> 00:11:54,400
那我怎么办呢

353
00:11:54,400 --> 00:11:56,866
我就获得这个排序列表的第一个节点

354
00:11:57,100 --> 00:11:58,100
啊第一个节点

355
00:11:58,133 --> 00:12:00,199
然后把这个节点这种number啊

356
00:12:00,266 --> 00:12:01,299
付给expare time

357
00:12:01,300 --> 00:12:02,500
然后返回就可以了

358
00:12:02,700 --> 00:12:04,166
因为排序列表排序列表啊

359
00:12:04,166 --> 00:12:04,966
他的第一个节点

360
00:12:04,966 --> 00:12:06,866
一定是最早过期的那个时钟

361
00:12:06,966 --> 00:12:08,399
所以就我获得第一个

362
00:12:08,500 --> 00:12:09,900
第一首节点就可以了

363
00:12:11,333 --> 00:12:12,499
那么下一个是什么呢

364
00:12:12,500 --> 00:12:17,600
下一个是OS thought link get target expert time

365
00:12:17,733 --> 00:12:18,733
就是获得什么呢

366
00:12:18,733 --> 00:12:19,966
目标过期时间

367
00:12:19,966 --> 00:12:20,966
那这是什么意思呢

368
00:12:21,000 --> 00:12:21,800
就是我

369
00:12:22,533 --> 00:12:24,766
在啊我寻找一个目标节

370
00:12:24,766 --> 00:12:26,899
就是说在这个在这个

371
00:12:27,166 --> 00:12:30,333
嗯排序列表中我我找一个特定的节点

372
00:12:30,333 --> 00:12:32,333
然后返回这个特定节点的过期时间

373
00:12:32,333 --> 00:12:33,333
那大家想一想

374
00:12:33,333 --> 00:12:35,399
根据我们刚才对肉number的解释

375
00:12:35,700 --> 00:12:38,166
那么这个目标节点实际上是什么

376
00:12:38,166 --> 00:12:38,566
这个目标

377
00:12:38,566 --> 00:12:40,566
其节点的过期时间应该是什么

378
00:12:40,566 --> 00:12:43,299
他所有前面这些节点roll number之和

379
00:12:43,300 --> 00:12:44,733
再加上他自己的roll number

380
00:12:44,866 --> 00:12:46,366
所以大家看啊大家看

381
00:12:46,400 --> 00:12:47,000
首先呢

382
00:12:47,000 --> 00:12:49,700
你看一下我把这个roll number付给谁呢

383
00:12:49,700 --> 00:12:50,600
roll number复成

384
00:12:50,600 --> 00:12:52,533
我要寻找那个节点的roll number

385
00:12:52,866 --> 00:12:53,733
然后呢

386
00:12:54,500 --> 00:12:56,266
首先是什么获取什么

387
00:12:56,266 --> 00:12:59,299
获取排序列表的头头头指针头指针

388
00:12:59,500 --> 00:13:01,533
然后呢通过这个entry红呢

389
00:13:01,566 --> 00:13:03,899
获得这个SOLT link list

390
00:13:04,200 --> 00:13:05,166
SOLT link list

391
00:13:05,333 --> 00:13:07,099
因为我要取得这个RO number嘛对吧

392
00:13:07,100 --> 00:13:08,866
我要取得这个roll number

393
00:13:08,966 --> 00:13:11,333
然后便利这个链表辨利这个链表

394
00:13:11,333 --> 00:13:13,766
当当前节点不等于他给的时候

395
00:13:13,766 --> 00:13:14,566
我就把

396
00:13:14,566 --> 00:13:16,899
当前节点的roll number和这个roll number

397
00:13:17,000 --> 00:13:18,400
相加看到了吧

398
00:13:18,400 --> 00:13:20,733
然后再便利下一个再取得下一个

399
00:13:20,766 --> 00:13:23,066
下一个排序链列表的节点

400
00:13:23,100 --> 00:13:25,000
那这样的话呢经过这个循环

401
00:13:25,000 --> 00:13:26,200
那么在rule number里头

402
00:13:26,200 --> 00:13:27,266
累加的结果是什么

403
00:13:27,266 --> 00:13:29,866
就是他给他SOLT list的这个节点

404
00:13:29,866 --> 00:13:32,199
目标节点之前的所有节点的

405
00:13:32,300 --> 00:13:33,166
rule number之核

406
00:13:33,333 --> 00:13:35,533
那么把这个rule number之核得到之后

407
00:13:35,533 --> 00:13:36,733
返回就可以了

408
00:13:39,100 --> 00:13:41,500
那么关于啊关于

409
00:13:42,066 --> 00:13:44,133
这个下面这个函数是什么

410
00:13:44,133 --> 00:13:45,966
下面这个函数就是排序

411
00:13:45,966 --> 00:13:48,299
OS sold link update expare time

412
00:13:48,400 --> 00:13:50,300
就是对超时列表啊

413
00:13:50,300 --> 00:13:52,600
对排序列表中的超时时间进行更新

414
00:13:53,000 --> 00:13:53,900
那么这个是什么呢

415
00:13:53,900 --> 00:13:56,333
就是实际上就是说把什么呢

416
00:13:56,333 --> 00:13:59,866
把把把排序列表中所有节点的

417
00:14:00,133 --> 00:14:03,266
所有节点的超时时间减去这个sleeptix

418
00:14:03,266 --> 00:14:05,499
减去这个时间片啊减去这个时间

419
00:14:06,066 --> 00:14:06,699
减去这个值

420
00:14:06,700 --> 00:14:07,733
那么我们看一下

421
00:14:07,733 --> 00:14:09,199
如果sleep text等于0的话

422
00:14:09,200 --> 00:14:10,666
那就意味着没有相减啊

423
00:14:10,666 --> 00:14:12,299
不用相减就直接Reter了

424
00:14:12,366 --> 00:14:14,799
否则的话我就取得排序列表的图指针

425
00:14:14,933 --> 00:14:17,166
啊如果这个排序列表不为空的话

426
00:14:17,166 --> 00:14:19,766
那我就依次获得什么呢

427
00:14:19,766 --> 00:14:21,933
依次获得这个排序列表中的

428
00:14:23,333 --> 00:14:25,599
啊那对这个是这样的啊这是这样的

429
00:14:25,600 --> 00:14:27,000
并不需要一个外循环为

430
00:14:27,000 --> 00:14:29,366
什么呢因为啊如果我要是把

431
00:14:29,966 --> 00:14:32,133
首首第一个排序列表

432
00:14:32,266 --> 00:14:34,533
排序列表中第一个节点的这个

433
00:14:34,733 --> 00:14:36,099
roll number减减去

434
00:14:36,100 --> 00:14:38,300
减去这个sliptik是Tik的话

435
00:14:38,300 --> 00:14:39,400
那就意味着这个排

436
00:14:39,400 --> 00:14:41,366
整个排序列表的所有节点啊

437
00:14:41,366 --> 00:14:44,366
所有的节点都会减少这个sliptiks

438
00:14:44,400 --> 00:14:46,500
那大家看啊实际上就是就是这样的

439
00:14:46,500 --> 00:14:48,466
你看我只是获得了第一个节点啊

440
00:14:48,466 --> 00:14:50,099
如果排序列表不为空的话

441
00:14:50,100 --> 00:14:52,000
那我就获得排序列表的第一个节点

442
00:14:52,100 --> 00:14:53,466
然后把这个第一个节点的时候

443
00:14:53,466 --> 00:14:54,333
number减去

444
00:14:54,333 --> 00:14:55,366
silly BTX减1

445
00:14:55,800 --> 00:14:58,866
那么就完成了对整个列表所有的节点

446
00:14:59,100 --> 00:15:00,133
它的柔number啊

447
00:15:00,133 --> 00:15:02,099
它的计时值啊计数器的值

448
00:15:02,300 --> 00:15:04,333
嗯削减一个sliptics

449
00:15:04,333 --> 00:15:06,066
减一的这个这么一个操作

450
00:15:06,333 --> 00:15:07,133
那么以上呢

451
00:15:07,133 --> 00:15:09,699
就是关于排序列表的所有操作

452
00:15:10,133 --> 00:15:10,966
那么至此呢

453
00:15:10,966 --> 00:15:12,733
我们也完成了第一章啊

454
00:15:12,733 --> 00:15:14,166
给大家介绍的这个

455
00:15:15,066 --> 00:15:17,366
啊基本的核心操核心数据结构啊

456
00:15:17,366 --> 00:15:18,933
经常用到的核心数据结构

457
00:15:18,933 --> 00:15:19,866
那主要有三个

458
00:15:19,933 --> 00:15:21,266
那么第一个就是什么呢

459
00:15:21,266 --> 00:15:23,133
第一个就是双向循环列表

460
00:15:23,266 --> 00:15:27,099
第二个是啊priority q啊优先级队列

461
00:15:27,100 --> 00:15:30,333
第三个就是soft Linklist叫做排序列表

462
00:15:30,466 --> 00:15:31,399
那么每一个

463
00:15:31,400 --> 00:15:33,700
都有他自己的一些显著的特征啊

464
00:15:33,966 --> 00:15:37,099
那请大家在课后呢啊阅读这些代码

465
00:15:37,533 --> 00:15:39,366
啊阅读这些代码进行复习

